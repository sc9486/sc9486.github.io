{"remainingRequest":"C:\\Users\\sc948\\Desktop\\Vue\\portfolio\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\sc948\\Desktop\\Vue\\portfolio\\src\\components\\Study.vue?vue&type=style&index=0&id=7a3aed49&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\sc948\\Desktop\\Vue\\portfolio\\src\\components\\Study.vue","mtime":1628837759849},{"path":"C:\\Users\\sc948\\Desktop\\Vue\\portfolio\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sc948\\Desktop\\Vue\\portfolio\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\sc948\\Desktop\\Vue\\portfolio\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\sc948\\Desktop\\Vue\\portfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\sc948\\Desktop\\Vue\\portfolio\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQoueW95b28tZGRyIHsNCiAgICB3aWR0aDogYXV0bzsNCiAgICBoZWlnaHQ6IGF1dG87DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KfQ0KLmltZyB7DQogICAgd2lkdGg6IDEwMCU7DQogICAgaGVpZ2h0OiAxMDAlOw0KICAgIHRvcDogNTAlOw0KICAgIGxlZnQ6IDUwJTsNCiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7ICAgDQp9DQoueW95b28tZGRyIC5yZXNpemUtaGFuZGxlciwNCi55b3lvby1kZHIgLnJvdGF0ZS1oYW5kbGVyIHsNCiAgZGlzcGxheTogbm9uZTsNCn0NCg0KLnlveW9vLWRkci5hY3RpdmUgew0KICBib3JkZXI6IDFweCBkYXNoZWQgIzYwN2Q4YjsNCn0NCg0KLnlveW9vLWRkci5hY3RpdmUgLnJlc2l6ZS1oYW5kbGVyLA0KLnlveW9vLWRkci5hY3RpdmUgLnJvdGF0ZS1oYW5kbGVyIHsNCiAgZGlzcGxheTogaW5saW5lLWJsb2NrOw0KfQ0KDQoucmVzaXplLWhhbmRsZXIsDQoucm90YXRlLWhhbmRsZXIgew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIGJvcmRlcjogMXB4IHNvbGlkICM2MDdkOGI7DQogIGJhY2tncm91bmQ6ICNmZmY7DQogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogIGJvcmRlci1yYWRpdXM6IDUwJTsNCn0NCg0KLnJlc2l6ZS1oYW5kbGVyLnRtIHsNCiAgbGVmdDogNTAlOw0KfQ0KDQoucmVzaXplLWhhbmRsZXIuciB7DQogIHRvcDogNTAlOw0KfQ0KDQoucmVzaXplLWhhbmRsZXIuYm0gew0KICBsZWZ0OiA1MCU7DQp9DQoNCi5yZXNpemUtaGFuZGxlci5sIHsNCiAgdG9wOiA1MCU7DQogIGN1cnNvcjogcG9pbnRlcjsNCn0NCg0KLnJvdGF0ZS1oYW5kbGVyIHsNCiAgbGVmdDogNTAlOw0KICBjdXJzb3I6IGNyb3NzaGFpcjsNCn0NCg=="},{"version":3,"sources":["Study.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"Study.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n    <!-- <div style=\"width:100px; margin:0 auto;\">\r\n    <p><input type=\"file\" id=\"file\" class=\"inputfile\" v-on:change=\"upload\">\r\n   \r\n    <div class = \"drag-box\">\r\n        \r\n        <p><img v-bind:src=\"newImgSrc\" class = \"img\"></p>   \r\n    </div>\r\n    </div> -->\r\n  <div>\r\n  <div>\r\n    <p><input type=\"file\" id=\"file\" class=\"inputfile\" v-on:change=\"upload\" accept=\"*.gif,.jpg,.png,audio/*\" \r\n    multiple required capture='user' onchange = 'aaa' style=\"width:310px;height:30px;top:130px;left:50px;font-size:15px;\"></p>    \r\n  </div>        \r\n  <div\r\n    ref=\"wrapper\"\r\n    :style=\"style\"\r\n    :class=\"{ active: active }\"\r\n    @touchstart=\"handleMouseDown\"\r\n    @mousedown=\"handleMouseDown\"\r\n    class=\"yoyoo-ddr\" >            \r\n  >\r\n   <p><img v-bind:src=\"newImgSrc\" class = \"img\"></p>   \r\n    <div v-if=\"resizable\">\r\n        <span\r\n          :data-resizetype=\"item\"\r\n          :key=\"item\"\r\n          :class=\"item\"\r\n          :style=\"{ ...getNewHandler(item) }\"\r\n          class=\"resize-handler\"\r\n          v-for=\"item in resizeHandler\"\r\n        ></span>\r\n    </div>\r\n    <span :style=\"rotateHandler\" v-if=\"rotatable\" data-type=\"rotate\" class=\"rotate-handler\" ></span>\r\n  </div> \r\n<form name=\"form\" method=\"post\">\r\n<table width=\"400\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n  <tr>\r\n    <td colspan=\"2\" align=\"left\" bgcolor=\"#FFFFFF\">\r\n      <table width=\"100%\" border=\"0\" cellpadding=\"0\" cellspacing=\"0\">\r\n        <tr>\r\n         <td colspan=\"5\" bgcolor=\"#FFFFFF\" height=\"25\" align=\"left\">\r\n         <input name=\"addButton\" type=\"button\" style=\"cursor:hand\"  @click=\"insRow\" value=\"추가\">\r\n         <font color=\"#FF0000\">*</font>추가버튼을 클릭해 보세요.</td>\r\n        </tr>\r\n        <tr>\r\n         <td height=\"25\">\r\n           <table id=\"addTable\" width=\"400\" cellspacing=\"0\" cellpadding=\"0\" bgcolor=\"#FFFFFF\" border=\"0\">\r\n            <tr>\r\n              <td><input type=\"text\" name=\"addText\" style=\"width:350px; height:20px;\"></td>\r\n              <td align=\"left\"></td>\r\n            </tr>\r\n          </table></td>\r\n        </tr>\r\n       </table>\r\n      </td>\r\n   </tr>\r\n </table>\r\n <table width=\"400\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n    <tr>\r\n      <td height=\"10\">\r\n      </td>\r\n    </tr>\r\n    <tr>\r\n      <td align=\"center\">\r\n      <input type=\"button\" name=\"button\" value=\"확인\" onClick=\"frmCheck();\">\r\n      </td>\r\n    </tr>\r\n </table>\r\n</form>\r\n</div>\r\n</template>\r\n<script>\r\nimport {\r\n  getBoundingRect,\r\n  getHandler,\r\n  getPoints,\r\n  getSize,\r\n  heightMap,\r\n  pointMap,\r\n  pointMap2,\r\n  rad2deg,\r\n  tr2bl,\r\n  widthMap,\r\n} from './helper'\r\nexport default {\r\n  name: 'ddr',\r\n  props: {\r\n    value: {\r\n      default: function() {\r\n        return { x: 0, y: 0, width: 100, height: 100, rotation: 0 }\r\n      },\r\n      type: Object,\r\n    },\r\n    handlerSize: {\r\n      type: Number,\r\n      default: 13,\r\n    },\r\n    active: {\r\n      default: true,\r\n      type: Boolean,\r\n    },\r\n    resizeHandler: {\r\n      default: function() {\r\n        return ['tl', 'tm', 'tr', 'r', 'br', 'bm', 'bl', 'l']\r\n      },\r\n      type: Array,\r\n    },\r\n    resizable: {\r\n      default: true,\r\n      type: Boolean,\r\n    },\r\n    rotatable: {\r\n      default: true,\r\n      type: Boolean,\r\n    },\r\n    draggable: {\r\n      default: true,\r\n      type: Boolean,\r\n    },\r\n    acceptRatio: {\r\n      default: false,\r\n      type: Boolean,\r\n    },\r\n    minWidth: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    minHeight: {\r\n      type: Number,\r\n      default: 1,\r\n    },\r\n    parent: {\r\n      type: Boolean,\r\n      default: false,\r\n    },\r\n  },\r\n  data() {\r\n    return {\r\n      transform: Object.assign({}, this.value),\r\n      currentRatio: 1,\r\n      isInitialRatio: false,\r\n       newImgSrc: '' // 새로운 이미지의 경로를 저장할 변수\r\n    }\r\n  },\r\n  created() {\r\n    // 缓存当前位置信息\r\n    this.localeTransform = { ...this.transform }\r\n  },\r\n  watch: {\r\n    value(t) {\r\n      this.transform = t\r\n    },\r\n  },\r\n  computed: {\r\n    rotateHandler() {\r\n      let size = Math.ceil(this.handlerSize) + 'px'\r\n      return {\r\n        width: size,\r\n        height: size,\r\n        top: -25 + 'px',\r\n        'margin-left': -Math.floor(this.handlerSize / 2) + 'px',\r\n      }\r\n    },\r\n    style() {\r\n      let transform = this.transform\r\n      return {\r\n        left: transform.x + 'px',\r\n        top: transform.y + 'px',\r\n        width: transform.width + 'px',\r\n        height: transform.height + 'px',\r\n        transform: `rotate(${transform.rotation}deg)`,\r\n      }\r\n    },\r\n  },\r\n  methods: {\r\n       upload(e) {\r\n        let file = e.target.files;\r\n        let reader = new FileReader();\r\n\r\n        reader.readAsDataURL(file[0]);\r\n        reader.onload = e => {\r\n            this.newImgSrc = e.target.result;                \r\n        }\r\n    },\r\n    getNewHandler(type) {\r\n      let cursor = getHandler(type, this.transform.rotation)\r\n      let { handlerSize } = this\r\n      let props = {}\r\n      let half = -Math.floor(handlerSize / 2) + 'px'\r\n      switch (type) {\r\n        case 'tl':\r\n          props = {\r\n            top: half,\r\n            left: half,\r\n          }\r\n          break\r\n        case 'tm':\r\n          props = { top: half, 'margin-left': half }\r\n          break\r\n        case 'tr':\r\n          props = { right: half, top: half }\r\n          break\r\n        case 'r':\r\n          props = { right: half, 'margin-top': half }\r\n          break\r\n        case 'br':\r\n          props = { bottom: half, right: half }\r\n          break\r\n        case 'bm':\r\n          props = { 'margin-left': half, bottom: half }\r\n          break\r\n        case 'bl':\r\n          props = { left: half, bottom: half }\r\n          break\r\n        case 'l':\r\n          props = { 'margin-top': half, left: half }\r\n          break\r\n      }\r\n      return {\r\n        cursor: cursor + '-resize',\r\n        width: Math.ceil(handlerSize) + 'px',\r\n        height: Math.ceil(handlerSize) + 'px',\r\n        ...props,\r\n      }\r\n    },\r\n\r\n    handleMouseDown(event) {\r\n      if (!this.active) return\r\n      let point = event.touches ? event.touches[0] : event\r\n      let { clientX, clientY } = point\r\n      this._lastX = clientX\r\n      this._lastY = clientY\r\n      this._activeTarget = event.target\r\n      this._parentRect = this.$refs.wrapper.parentNode.getBoundingClientRect()\r\n      this.localeTransform = this.transform\r\n      // Get the movable boundary of the element in the parent element\r\n      if (this.parent) {\r\n        let mouseDownRect = getBoundingRect(this.transform)\r\n        let minLeft = this.transform.x - mouseDownRect.left\r\n        let maxLeft = this._parentRect.width - this.transform.width - minLeft\r\n        let minTop = this.transform.y - mouseDownRect.top\r\n        let maxTop = this._parentRect.height - this.transform.height - minTop\r\n        this.minBoundary = { minLeft, maxLeft, minTop, maxTop }\r\n      }\r\n      document.addEventListener('mousemove', this.handleMouseMove, false)\r\n      document.addEventListener('touchmove', this.handleMouseMove, false)\r\n      document.addEventListener('touchend', this.handleMouseUp, false)\r\n      document.addEventListener('mouseup', this.handleMouseUp, false)\r\n      if (event.target.dataset.type === 'rotate') {\r\n        this._handlerType = 'rotate'\r\n        this.handleRotateStart(event)\r\n        this.$emit('rotate-start', event, this.transform)\r\n      } else if (this._activeTarget.dataset.resizetype) {\r\n        this._handlerType = 'resize'\r\n        this.handleResizeStart(event)\r\n        this.$emit('resize-start', event, this.transform)\r\n      } else {\r\n        this._handlerType = 'drag'\r\n        this.draggable && this.$emit('drag-start', event, this.transform)\r\n      }\r\n    },\r\n    handleMouseMove(event) {\r\n      if (this._handlerType === 'resize') {\r\n        this.handleResizeMove(event)\r\n        this.$emit('resize', event, this.transform)\r\n      } else if (this._handlerType === 'drag' && this.draggable) {\r\n        this.doMove(event)\r\n        this.$emit('drag', event, this.transform)\r\n      } else if (this._handlerType === 'rotate') {\r\n        this.handleRotateMove(event)\r\n        this.$emit('rotate', event, this.transform)\r\n      }\r\n    },\r\n    doMove(event) {\r\n      let { clientX, clientY } = event.touches ? event.touches[0] : event\r\n      let deltaX = clientX - this._lastX\r\n      let deltaY = clientY - this._lastY\r\n      this._lastX = clientX\r\n      this._lastY = clientY\r\n      if (this.parent) {\r\n        this.localeTransform.x += deltaX\r\n        this.localeTransform.y += deltaY\r\n        this.restrictToParentBoundary()\r\n      } else {\r\n        this.transform.x = Math.round(this.transform.x + deltaX)\r\n        this.transform.y = Math.round(this.transform.y + deltaY)\r\n      }\r\n    },\r\n    restrictToParentBoundary() {\r\n      let x = Math.max(this.minBoundary.minLeft, this.localeTransform.x)\r\n      let y = Math.max(this.minBoundary.minTop, this.localeTransform.y)\r\n      x = Math.min(this.minBoundary.maxLeft, x)\r\n      y = Math.min(this.minBoundary.maxTop, y)\r\n      this.transform.x = Math.round(x)\r\n      this.transform.y = Math.round(y)\r\n    },\r\n    handleMouseUp(event) {\r\n      document.removeEventListener('mousemove', this.handleMouseMove, false)\r\n      document.removeEventListener('mouseup', this.handleMouseUp, false)\r\n      document.removeEventListener('touchmove', this.handleMouseMove, false)\r\n      document.removeEventListener('touchend', this.handleMouseUp, false)\r\n      let ev = {\r\n        drag: 'draggable',\r\n        resize: 'resizable',\r\n        rotate: 'rotatable',\r\n      }\r\n      this.isInitialRatio = false\r\n      this[ev[this._handlerType]] && this.$emit(this._handlerType + '-end', event, this.transform)\r\n    },\r\n    handleResizeStart(event) {\r\n     \r\n      let type = event.target.dataset.resizetype\r\n      let rect = this.transform\r\n      let matrix = getPoints(rect)\r\n      let pressAngle\r\n      let opposite = matrix[pointMap[type]]\r\n      let opp2 = matrix[pointMap2[type]]\r\n      let { clientX, clientY } = event.touches ? event.touches[0] : event\r\n      let x1 = clientX - this._parentRect.left - opp2.x\r\n      let y1 = clientY - this._parentRect.top - opp2.y\r\n      let _width = rect.width,\r\n        _height = rect.height\r\n     \r\n      if (tr2bl[type]) {\r\n        if (widthMap[type]) _height /= 2\r\n        pressAngle = rad2deg(Math.atan2(_width, _height))\r\n      } else {\r\n        if (heightMap[type]) _width /= 2\r\n        pressAngle = rad2deg(Math.atan2(_height, _width))\r\n      }\r\n      let startAngle = rad2deg(Math.atan2(y1, x1))\r\n      this._resizeOpt = {\r\n        matrix,\r\n        rect,\r\n        type,\r\n        opposite,\r\n        opp2,\r\n        pressAngle,\r\n        startAngle,\r\n      }\r\n    },\r\n    handleResizeMove(event) {\r\n      let { clientX, clientY } = event.touches ? event.touches[0] : event\r\n      let { opposite, opp2, type, pressAngle, startAngle } = this._resizeOpt\r\n      let x = clientX - this._parentRect.left - opp2.x,\r\n        y = clientY - this._parentRect.top - opp2.y,\r\n        dis = Math.hypot(y, x)\r\n      let ratio = event.shiftKey || this.acceptRatio\r\n      if (!this.isInitialRatio && ratio) {\r\n        this.currentRatio = this.transform.width / this.transform.height\r\n        this.isInitialRatio = true\r\n      }\r\n\r\n      if (!ratio) {\r\n        this.isInitialRatio = false\r\n      }\r\n\r\n      let { w, h } = getSize({\r\n        type,\r\n        dis,\r\n        x,\r\n        y,\r\n        startAngle,\r\n        pressAngle,\r\n      })\r\n      let transform = Object.assign({}, this.transform)\r\n      if (this.isInitialRatio) {\r\n        if (widthMap[type]) h = w / this.currentRatio\r\n        else w = h * this.currentRatio\r\n      }\r\n      w = Math.max(Math.round(w), this.minWidth)\r\n      h = Math.max(Math.round(h), this.minHeight)\r\n      if (widthMap[type] && !ratio) {\r\n        transform.width = w\r\n      } else if (heightMap[type] && !ratio) {\r\n        transform.height = h\r\n      } else {\r\n        transform.width = w\r\n        transform.height = h\r\n      }\r\n\r\n      let matrix = getPoints(transform)\r\n      let _opp = matrix[pointMap[type]]\r\n      let deltaX = -(_opp.x - opposite.x),\r\n        deltaY = -(_opp.y - opposite.y)\r\n      transform.x = Math.round(transform.x + deltaX)\r\n      transform.y = Math.round(transform.y + deltaY)\r\n\r\n      this.transform = transform\r\n    },\r\n    handleRotateStart(event) {\r\n      let { clientX, clientY } = event.touches ? event.touches[0] : event\r\n      let t = this.$refs.wrapper.getBoundingClientRect(),\r\n        cx = t.left + t.width / 2,\r\n        cy = t.top + t.height / 2,\r\n        startAngle = (180 / Math.PI) * Math.atan2(clientY - cy, clientX - cx),\r\n        rotation = this.transform.rotation\r\n      this._rotateOpt = { cx, cy, startAngle, rotation }\r\n    },\r\n    handleRotateMove(event) {\r\n      let { cx, cy, startAngle, rotation } = this._rotateOpt\r\n      let { clientX, clientY } = event.touches ? event.touches[0] : event\r\n      let x = clientX - cx,\r\n        y = clientY - cy,\r\n        angle = (180 / Math.PI) * Math.atan2(y, x),\r\n        currentAngle = angle - startAngle,\r\n        r = rotation + currentAngle\r\n      r = r % 360\r\n      r = r < 0 ? r + 360 : r\r\n      this.transform.rotation = Math.floor(r)\r\n    },\r\n   insRow() {\r\n  oTbl = document.getElementById(\"addTable\");\r\n  var oRow = oTbl.insertRow();\r\n  oRow.onmouseover=function(){oTbl.clickedRowIndex=this.rowIndex}; //clickedRowIndex - 클릭한 Row의 위치를 확인;\r\n  var oCell = oRow.insertCell();\r\n\r\n  //삽입될 Form Tag\r\n  var frmTag = \"<input type=text name=addText style=width:350px; height:20px;> \";\r\n  frmTag += \"<input type=button value='삭제' onClick='removeRow()' style='cursor:hand'>\";\r\n  oCell.innerHTML = frmTag;\r\n},\r\n//Row 삭제\r\n removeRow() {\r\n  oTbl.deleteRow(oTbl.clickedRowIndex);\r\n},\r\n\r\n   frmCheck()\r\n{\r\n  var frm = document.form;\r\n  \r\n  for( var i = 0; i <= frm.elements.length - 1; i++ ){\r\n     if( frm.elements[i].name == \"addText\" )\r\n     {\r\n         if( !frm.elements[i].value ){\r\n             alert(\"텍스트박스에 값을 입력하세요!\");\r\n                 frm.elements[i].focus();\r\n\t return;\r\n          }\r\n      }\r\n   }\r\n },\r\n},\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.yoyoo-ddr {\r\n    width: auto;\r\n    height: auto;\r\n    position: absolute;\r\n}\r\n.img {\r\n    width: 100%;\r\n    height: 100%;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n    position: absolute;   \r\n}\r\n.yoyoo-ddr .resize-handler,\r\n.yoyoo-ddr .rotate-handler {\r\n  display: none;\r\n}\r\n\r\n.yoyoo-ddr.active {\r\n  border: 1px dashed #607d8b;\r\n}\r\n\r\n.yoyoo-ddr.active .resize-handler,\r\n.yoyoo-ddr.active .rotate-handler {\r\n  display: inline-block;\r\n}\r\n\r\n.resize-handler,\r\n.rotate-handler {\r\n  position: absolute;\r\n  border: 1px solid #607d8b;\r\n  background: #fff;\r\n  box-sizing: border-box;\r\n  border-radius: 50%;\r\n}\r\n\r\n.resize-handler.tm {\r\n  left: 50%;\r\n}\r\n\r\n.resize-handler.r {\r\n  top: 50%;\r\n}\r\n\r\n.resize-handler.bm {\r\n  left: 50%;\r\n}\r\n\r\n.resize-handler.l {\r\n  top: 50%;\r\n  cursor: pointer;\r\n}\r\n\r\n.rotate-handler {\r\n  left: 50%;\r\n  cursor: crosshair;\r\n}\r\n</style>\r\n\r\n\r\n\r\n"]}]}